/*
 * This would have easier except I didn't want to touch the source files.
 * The ipython stuff sets the IPython namespace with var which means that 
 * it won't affect globals in browserify. So instead I grab the script
 * contents with the help of brfs and add a return.
 *
 * Note: This file is called when using browserify via the 'browser' section
 * in package.json
 */
var fs = require('fs');
var path = require('path');

var content = "//----------------------------------------------------------------------------\n//  Copyright (C) 2008-2011  The IPython Development Team\n//\n//  Distributed under the terms of the BSD License.  The full license is in\n//  the file COPYING, distributed as part of this software.\n//----------------------------------------------------------------------------\n\nvar IPython = IPython || {};\n\nIPython.namespace = function (ns_string) {\n    var parts = ns_string.split('.'),\n        parent = IPython,\n        i;\n\n    // String redundant leading global\n    if (parts[0] === \"IPython\") {\n        parts = parts.slice(1);\n    }\n\n    for (i=0; i<parts.length; i+=1) {\n        // Create property if it doesn't exist\n        if (typeof parent[parts[i]] === \"undefined\") {\n            parent[parts[i]] = {};\n        }\n    }\n    return parent;\n};\n\n\n\n//----------------------------------------------------------------------------\n//  Copyright (C) 2008-2011  The IPython Development Team\n//\n//  Distributed under the terms of the BSD License.  The full license is in\n//  the file COPYING, distributed as part of this software.\n//----------------------------------------------------------------------------\n\n//============================================================================\n// Utilities\n//============================================================================\n\nIPython.namespace('IPython.utils');\n\nIPython.utils = (function (IPython) {\n\n    var uuid = function () {\n        // http://www.ietf.org/rfc/rfc4122.txt\n        var s = [];\n        var hexDigits = \"0123456789ABCDEF\";\n        for (var i = 0; i < 32; i++) {\n            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);\n        }\n        s[12] = \"4\";  // bits 12-15 of the time_hi_and_version field to 0010\n        s[16] = hexDigits.substr((s[16] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01\n\n        var uuid = s.join(\"\");\n        return uuid;\n    };\n\n\n    //Fix raw text to parse correctly in crazy XML\n    function xmlencode(string) {\n        return string.replace(/\\&/g,'&'+'amp;')\n            .replace(/</g,'&'+'lt;')\n            .replace(/>/g,'&'+'gt;')\n            .replace(/\\'/g,'&'+'apos;')\n            .replace(/\\\"/g,'&'+'quot;')\n            .replace(/`/g,'&'+'#96;');\n    }\n\n\n    //Map from terminal commands to CSS classes\n    ansi_colormap = {\n        \"30\":\"ansiblack\", \"31\":\"ansired\",\n        \"32\":\"ansigreen\", \"33\":\"ansiyellow\",\n        \"34\":\"ansiblue\", \"35\":\"ansipurple\",\"36\":\"ansicyan\",\n        \"37\":\"ansigrey\", \"01\":\"ansibold\"\n    };\n\n    // Transform ANSI color escape codes into HTML <span> tags with css\n    // classes listed in the above ansi_colormap object. The actual color used\n    // are set in the css file.\n    function fixConsole(txt) {\n        txt = xmlencode(txt);\n        var re = /\\033\\[([\\dA-Fa-f;]*?)m/;\n        var opened = false;\n        var cmds = [];\n        var opener = \"\";\n        var closer = \"\";\n        while (re.test(txt)) {\n            var cmds = txt.match(re)[1].split(\";\");\n            closer = opened?\"</span>\":\"\";\n            opened = cmds.length > 1 || cmds[0] != 0;\n            var rep = [];\n            for (var i in cmds)\n                if (typeof(ansi_colormap[cmds[i]]) != \"undefined\")\n                    rep.push(ansi_colormap[cmds[i]]);\n            opener = rep.length > 0?\"<span class=\\\"\"+rep.join(\" \")+\"\\\">\":\"\";\n            txt = txt.replace(re, closer + opener);\n        }\n        if (opened) txt += \"</span>\";\n        return txt;\n    }\n\n    // Remove chunks that should be overridden by the effect of\n    // carriage return characters\n    function fixCarriageReturn(txt) {\n        tmp = txt;\n        do {\n            txt = tmp;\n            tmp = txt.replace(/^.*\\r(?!\\n)/gm, '');\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n\n    grow = function(element) {\n        // Grow the cell by hand. This is used upon reloading from JSON, when the\n        // autogrow handler is not called.\n        var dom = element.get(0);\n        var lines_count = 0;\n        // modified split rule from\n        // http://stackoverflow.com/questions/2035910/how-to-get-the-number-of-lines-in-a-textarea/2036424#2036424\n        var lines = dom.value.split(/\\r|\\r\\n|\\n/);\n        lines_count = lines.length;\n        if (lines_count >= 1) {\n            dom.rows = lines_count;\n        } else {\n            dom.rows = 1;\n        }\n    };\n\n    // some keycodes that seem to be platform/browser independant\n    var keycodes ={\n                BACKSPACE:  8,\n                TAB      :  9,\n                ENTER    : 13,\n                SHIFT    : 16,\n                CTRL     : 17,\n                CONTROL  : 17,\n                ALT      : 18,\n                ESC      : 27,\n                SPACE    : 32,\n                PGUP     : 33,\n                PGDOWN   : 34,\n                LEFT_ARROW: 37,\n                LEFTARROW: 37,\n                LEFT     : 37,\n                UP_ARROW : 38,\n                UPARROW  : 38,\n                UP       : 38,\n                RIGHT_ARROW:39,\n                RIGHTARROW:39,\n                RIGHT    : 39,\n                DOWN_ARROW: 40,\n                DOWNARROW: 40,\n                DOWN     : 40,\n    };\n\n\n    points_to_pixels = function (points) {\n        // A reasonably good way of converting between points and pixels.\n        var test = $('<div style=\"display: none; width: 10000pt; padding:0; border:0;\"></div>');\n        $(body).append(test);\n        var pixel_per_point = test.width()/10000;\n        test.remove();\n        return Math.floor(points*pixel_per_point);\n    }\n\n\n    return {\n        uuid : uuid,\n        fixConsole : fixConsole,\n        keycodes : keycodes,\n        grow : grow,\n        fixCarriageReturn : fixCarriageReturn,\n        points_to_pixels : points_to_pixels\n    };\n\n}(IPython));\n//----------------------------------------------------------------------------\n//  Copyright (C) 2008-2011  The IPython Development Team\n//\n//  Distributed under the terms of the BSD License.  The full license is in\n//  the file COPYING, distributed as part of this software.\n//----------------------------------------------------------------------------\n\n//============================================================================\n// Events\n//============================================================================\n\n// Give us an object to bind all events to. This object should be created\n// before all other objects so it exists when others register event handlers.\n// To trigger an event handler:\n// $([IPython.events]).trigger('event.Namespace');\n// To handle it:\n// $([IPython.events]).on('event.Namespace',function () {});\n\nvar IPython = (function (IPython) {\n\n    var utils = IPython.utils;\n\n    var Events = function () {};\n\n    IPython.Events = Events;\n    IPython.events = new Events();\n\n    return IPython;\n\n}(IPython));\n\n//----------------------------------------------------------------------------\n//  Copyright (C) 2008-2011  The IPython Development Team\n//\n//  Distributed under the terms of the BSD License.  The full license is in\n//  the file COPYING, distributed as part of this software.\n//----------------------------------------------------------------------------\n\n//============================================================================\n// Kernel\n//============================================================================\n\nvar IPython = (function (IPython) {\n\n    var utils = IPython.utils;\n\n    // Initialization and connection.\n\n    var Kernel = function (base_url, kernel_path) {\n        this.kernel_id = null;\n        this.shell_channel = null;\n        this.iopub_channel = null;\n        this.base_url = base_url;\n        this.kernel_path = kernel_path;\n        this.running = false;\n        this.username = \"username\";\n        this.session_id = utils.uuid();\n        this._msg_callbacks = {};\n\n        if (typeof(WebSocket) !== 'undefined') {\n            this.WebSocket = WebSocket;\n        } else if (typeof(MozWebSocket) !== 'undefined') {\n            this.WebSocket = MozWebSocket;\n        } else {\n            alert('Your browser does not have WebSocket support, please try Chrome, Safari or Firefox â‰¥ 6. Firefox 4 and 5 are also supported by you have to enable WebSockets in about:config.');\n        };\n    };\n\n\n    Kernel.prototype._get_msg = function (msg_type, content) {\n        var msg = {\n            header : {\n                msg_id : utils.uuid(),\n                username : this.username,\n                session : this.session_id,\n                msg_type : msg_type\n            },\n            metadata : {},\n            content : content,\n            parent_header : {}\n        };\n        return msg;\n    };\n\n    Kernel.prototype.start = function (notebook_id) {\n        var that = this;\n        if (!this.running) {\n            var qs = $.param({notebook:notebook_id});\n            var url = this.base_url + '?' + qs;\n            if (this.kernel_path) {\n              var url = this.base_url + '/' +  this.kernel_path + '?' + qs;\n            }\n            $.post(url,\n                $.proxy(that._kernel_started,that),\n                'json'\n            );\n        };\n    };\n\n\n    Kernel.prototype.restart = function () {\n        $([IPython.events]).trigger('status_restarting.Kernel');\n        var that = this;\n        if (this.running) {\n            this.stop_channels();\n            var url = this.kernel_url + \"/restart\";\n            $.post(url,\n                $.proxy(that._kernel_started, that),\n                'json'\n            );\n        };\n    };\n\n\n    Kernel.prototype._kernel_started = function (json) {\n        console.log(\"Kernel started: \", json.kernel_id);\n        this.running = true;\n        this.kernel_id = json.kernel_id;\n        var ws_url = json.ws_url;\n        if (ws_url.match(/wss?:\\/\\//) == null) {\n          if (this.kernel_path) {\n            ws_url = \"ws\" + this.base_url.substr(4) + ws_url;\n          } else {\n            ws_url = \"ws\" + location.origin.substr(4) + ws_url;\n          }\n        };\n        this.ws_url = ws_url;\n        this.kernel_url = this.base_url + \"/\" + this.kernel_id;\n        if (this.kernel_path) {\n          this.kernel_url = this.base_url + \"/\" + this.kernel_path + '/' + this.kernel_id;\n        }\n        this.start_channels();\n        this.shell_channel.onmessage = $.proxy(this._handle_shell_reply,this);\n        this.iopub_channel.onmessage = $.proxy(this._handle_iopub_reply,this);\n    };\n\n\n    Kernel.prototype._websocket_closed = function(ws_url, early){\n        var msg;\n        var parent_item = $('body');\n        if (early) {\n            msg = \"Websocket connection to \" + ws_url + \" could not be established.\" +\n            \" You will NOT be able to run code.\" +\n            \" Your browser may not be compatible with the websocket version in the server,\" +\n            \" or if the url does not look right, there could be an error in the\" +\n            \" server's configuration.\";\n        } else {\n            IPython.notification_widget.set_message('Reconnecting Websockets', 1000);\n            this.start_channels();\n            return;\n        }\n        var dialog = $('<div/>');\n        dialog.html(msg);\n        parent_item.append(dialog);\n        dialog.dialog({\n            resizable: false,\n            modal: true,\n            title: \"Websocket closed\",\n            closeText: \"\",\n            close: function(event, ui) {$(this).dialog('destroy').remove();},\n            buttons : {\n                \"OK\": function () {\n                    $(this).dialog('close');\n                }\n            }\n        });\n\n    };\n\n    Kernel.prototype.start_channels = function () {\n        var that = this;\n        this.stop_channels();\n        var ws_url = this.ws_url + this.kernel_url;\n        if (this.kernel_path) {\n          ws_url = this.ws_url + '/' + this.kernel_path + '/' + this.kernel_id;\n        }\n        console.log(\"Starting WS:\", ws_url, 'ws', this.ws_url, 'kn', this.kernel_url);\n        this.shell_channel = new this.WebSocket(ws_url + \"/shell\");\n        this.stdin_channel = new this.WebSocket(ws_url + \"/stdin\");\n        this.iopub_channel = new this.WebSocket(ws_url + \"/iopub\");\n        send_cookie = function(){\n            // send the session id so the Session object Python-side\n            // has the same identity\n            this.send(that.session_id + ':' + document.cookie);\n        };\n        var already_called_onclose = false; // only alert once\n        ws_closed_early = function(evt){\n            if (already_called_onclose){\n                return;\n            }\n            already_called_onclose = true;\n            if ( ! evt.wasClean ){\n                that._websocket_closed(ws_url, true);\n            }\n        };\n        ws_closed_late = function(evt){\n            if (already_called_onclose){\n                return;\n            }\n            already_called_onclose = true;\n            if ( ! evt.wasClean ){\n                that._websocket_closed(ws_url, false);\n            }\n        };\n        this.shell_channel.onopen = send_cookie;\n        this.shell_channel.onclose = ws_closed_early;\n        this.iopub_channel.onopen = send_cookie;\n        this.iopub_channel.onclose = ws_closed_early;\n        // switch from early-close to late-close message after 1s\n        setTimeout(function(){\n            that.shell_channel.onclose = ws_closed_late;\n            that.iopub_channel.onclose = ws_closed_late;\n        }, 1000);\n    };\n\n\n    Kernel.prototype.stop_channels = function () {\n        if (this.shell_channel !== null) {\n            this.shell_channel.onclose = function (evt) {};\n            this.shell_channel.close();\n            this.shell_channel = null;\n        };\n        if (this.iopub_channel !== null) {\n            this.iopub_channel.onclose = function (evt) {};\n            this.iopub_channel.close();\n            this.iopub_channel = null;\n        };\n    };\n\n    // Main public methods.\n\n    Kernel.prototype.object_info_request = function (objname, callbacks) {\n        // When calling this method pass a callbacks structure of the form:\n        //\n        // callbacks = {\n        //  'object_info_reply': object_into_reply_callback\n        // }\n        //\n        // The object_info_reply_callback will be passed the content object of the\n        // object_into_reply message documented here:\n        //\n        // http://ipython.org/ipython-doc/dev/development/messaging.html#object-information\n        if(typeof(objname)!=null && objname!=null)\n        {\n            var content = {\n                oname : objname.toString(),\n            };\n            var msg = this._get_msg(\"object_info_request\", content);\n            this.shell_channel.send(JSON.stringify(msg));\n            this.set_callbacks_for_msg(msg.header.msg_id, callbacks);\n            return msg.header.msg_id;\n        }\n        return;\n    }\n\n    Kernel.prototype.execute = function (code, callbacks, options) {\n        // The options object should contain the options for the execute call. Its default\n        // values are:\n        //\n        // options = {\n        //   silent : true,\n        //   user_variables : [],\n        //   user_expressions : {},\n        //   allow_stdin : false\n        // }\n        //\n        // When calling this method pass a callbacks structure of the form:\n        //\n        // callbacks = {\n        //  'execute_reply': execute_reply_callback,\n        //  'output': output_callback,\n        //  'clear_output': clear_output_callback,\n        //  'set_next_input': set_next_input_callback\n        // }\n        //\n        // The execute_reply_callback will be passed the content object of the execute_reply\n        // message documented here:\n        //\n        // http://ipython.org/ipython-doc/dev/development/messaging.html#execute\n        //\n        // The output_callback will be passed msg_type ('stream','display_data','pyout','pyerr')\n        // of the output and the content object of the PUB/SUB channel that contains the\n        // output:\n        //\n        // http://ipython.org/ipython-doc/dev/development/messaging.html#messages-on-the-pub-sub-socket\n        //\n        // The clear_output_callback will be passed a content object that contains\n        // stdout, stderr and other fields that are booleans.\n        //\n        // The set_next_input_callback will bepassed the text that should become the next\n        // input cell.\n\n        var content = {\n            code : code,\n            silent : true,\n            user_variables : [],\n            user_expressions : {},\n            allow_stdin : false\n        };\n\t\t$.extend(true, content, options)\n        var msg = this._get_msg(\"execute_request\", content);\n        this.shell_channel.send(JSON.stringify(msg));\n        this.set_callbacks_for_msg(msg.header.msg_id, callbacks);\n        return msg.header.msg_id;\n    };\n\n\n    Kernel.prototype.complete = function (line, cursor_pos, callbacks) {\n        // When calling this method pass a callbacks structure of the form:\n        //\n        // callbacks = {\n        //  'complete_reply': complete_reply_callback\n        // }\n        //\n        // The complete_reply_callback will be passed the content object of the\n        // complete_reply message documented here:\n        //\n        // http://ipython.org/ipython-doc/dev/development/messaging.html#complete\n        callbacks = callbacks || {};\n        var content = {\n            text : '',\n            line : line,\n            cursor_pos : cursor_pos\n        };\n        var msg = this._get_msg(\"complete_request\", content);\n        this.shell_channel.send(JSON.stringify(msg));\n        this.set_callbacks_for_msg(msg.header.msg_id, callbacks);\n        return msg.header.msg_id;\n    };\n\n\n    Kernel.prototype.interrupt = function () {\n        if (this.running) {\n            $([IPython.events]).trigger('status_interrupting.Kernel');\n            $.post(this.kernel_url + \"/interrupt\");\n        };\n    };\n\n\n    Kernel.prototype.kill = function () {\n        if (this.running) {\n            this.running = false;\n            var settings = {\n                cache : false,\n                type : \"DELETE\"\n            };\n            $.ajax(this.kernel_url, settings);\n        };\n    };\n\n\n    // Reply handlers.\n\n    Kernel.prototype.get_callbacks_for_msg = function (msg_id) {\n        var callbacks = this._msg_callbacks[msg_id];\n        return callbacks;\n    };\n\n\n    Kernel.prototype.set_callbacks_for_msg = function (msg_id, callbacks) {\n        this._msg_callbacks[msg_id] = callbacks || {};\n    }\n\n\n    Kernel.prototype._handle_shell_reply = function (e) {\n        reply = $.parseJSON(e.data);\n        var header = reply.header;\n        var content = reply.content;\n        var metadata = reply.metadata;\n        var msg_type = header.msg_type;\n        var callbacks = this.get_callbacks_for_msg(reply.parent_header.msg_id);\n        if (callbacks !== undefined) {\n            var cb = callbacks[msg_type];\n            if (cb !== undefined) {\n                cb(content, metadata);\n            }\n        };\n\n        if (content.payload !== undefined) {\n            var payload = content.payload || [];\n            this._handle_payload(callbacks, payload);\n        }\n    };\n\n\n    Kernel.prototype._handle_payload = function (callbacks, payload) {\n        var l = payload.length;\n        // Payloads are handled by triggering events because we don't want the Kernel\n        // to depend on the Notebook or Pager classes.\n        for (var i=0; i<l; i++) {\n            if (payload[i].source === 'IPython.zmq.page.page') {\n                var data = {'text':payload[i].text}\n                $([IPython.events]).trigger('open_with_text.Pager', data);\n            } else if (payload[i].source === 'IPython.zmq.zmqshell.ZMQInteractiveShell.set_next_input') {\n                if (callbacks.set_next_input !== undefined) {\n                    callbacks.set_next_input(payload[i].text)\n                }\n            }\n        };\n    };\n\n\n    Kernel.prototype._handle_iopub_reply = function (e) {\n        reply = $.parseJSON(e.data);\n        var content = reply.content;\n        var msg_type = reply.header.msg_type;\n        var metadata = reply.metadata;\n        var callbacks = this.get_callbacks_for_msg(reply.parent_header.msg_id);\n        if (msg_type !== 'status' && callbacks === undefined) {\n            // Message not from one of this notebook's cells and there are no\n            // callbacks to handle it.\n            return;\n        }\n        var output_types = ['stream','display_data','pyout','pyerr'];\n        if (output_types.indexOf(msg_type) >= 0) {\n            var cb = callbacks['output'];\n            if (cb !== undefined) {\n                cb(msg_type, content, metadata);\n            }\n        } else if (msg_type === 'status') {\n            if (content.execution_state === 'busy') {\n                $([IPython.events]).trigger('status_busy.Kernel');\n            } else if (content.execution_state === 'idle') {\n                $([IPython.events]).trigger('status_idle.Kernel', reply.parent_header.msg_id);\n            } else if (content.execution_state === 'dead') {\n                this.stop_channels();\n                $([IPython.events]).trigger('status_dead.Kernel');\n            };\n        } else if (msg_type === 'clear_output') {\n            var cb = callbacks['clear_output'];\n            if (cb !== undefined) {\n                cb(content, metadata);\n            }\n        };\n    };\n\n\n    IPython.Kernel = Kernel;\n\n    return IPython;\n\n}(IPython));\n\n";
// Assume that jquery is coming externally
if (typeof($) === 'undefined') {
  window.$ = require('jquery-browserify');
}
$.support.cors = true;
module.exports = new Function(content + ";IPython.$ = $;return IPython;")();
